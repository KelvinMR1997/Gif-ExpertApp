{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAY,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACtCN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,QCLdG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEnC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCLGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,0FAC0EO,UAC7FF,GAFmB,sBAKFG,MAAMR,GALJ,cAKfS,EALe,gBAOEA,EAAKC,KAAK,IAPZ,uBAObC,EAPa,EAObA,KAKFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MAEXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAjBjB,kBAoBdY,GApBc,4CAAH,sDCEPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAa,MAEdpB,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OATAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACC,GACtBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACd,IAEGe,EDhB2BK,CAAapB,GAAvCc,EAD+B,EAC/BA,QAAeH,EADgB,EACtBL,KAIjB,OACE,qCACE,oBAAIV,UAAU,oCAAd,SAAmDI,IAKlDc,GAAW,mBAAGlB,UAAU,+CAAb,wBACZ,qBAAKA,UAAU,YAAf,SACGe,EAAOH,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEhBnBW,EAAe,WAAM,MAEEzC,mBAAS,CAAC,kBAFZ,mBAEzB0C,EAFyB,KAEb3C,EAFa,KAQhC,OACE,qCACE,+CACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBACA,6BACG2C,EAAWd,KAAI,SAACR,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCX/BuB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.b2e43656.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategory }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategory((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n// Hacer requerida la función serCategory\r\nAddCategory.propTypes = {\r\n  setCategory: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\n// Desestructuracion de props\r\nexport const GifGridItem = ({ title, url }) => {\r\n  // console.log(title, url);\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","// getGifs is an aync function that recieves an argument  (category ) that argument will be inside of our url\r\n// inside on an encodeURI function  then the  const \"resp\" do a fetch of our url api, we'll be able to get the data from resp. then const \"gifs\" wil do a map of img (data.img) reurning id, title, and url at the same time the function getGifs return gis who has the data.\r\nexport const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=6J1y4L6gJtdEtdtJVFPCEVlivVda9uIM&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n\r\n  const resp = await fetch(url);\r\n\r\n  const { data } = await resp.json({\r\n    //   ok: true,\r\n    //   resp,\r\n  });\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n    //   El signo de interrogación es para preguntar si existe la imagen.\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","// import { useState, useEffect } from \"react\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { loading, data: images } = useFetchGifs(category);\r\n  // console.log(data);\r\n\r\n  // const [images, setImages] = useState([]);\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {/* Operador ternario:\r\n      loading ? (= true) = 'cargando...' : (!=true) 'Data cargada' \r\n      // Doble ampersand && si es verdadero haga lo siguiente, sino no haga nada\r\n      */}\r\n      {loading && <p className=\"txt-loading animate__animated animate__flash\">Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../components/helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  // -------------State-------------\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  // ------------------Effect\r\n\r\n  //   UseEffect hace que las funciones dentro de él se ejecunten solo cuando se renderiza por primera vez el componente, asi evita la multiplicación e peticiones en cada cambio de estado, como primer paraametro recibe una función de funciones, es decir una funcion cuyo cuerpo será el codigo a cargar por primera vez, el segundo parametro es un arreglo de dependencias, para que estas funciones solo se carguen una vez, pero que pasa si NO se deja vacio... ?\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GifGrid } from \"./GifGrid\";\r\nexport const GifExpertApp = () => {\r\n  //   const categories = [\"One punch man\", \"Samurai X\", \"Dragon ball Z\"];\r\n  const [categories, setCategory] = useState([\"One punch man\"]);\r\n\r\n  // const handleAdd = () => {\r\n  //   setCategory([...categories, \"Death Note\"]);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h2>Gif Exper App</h2>\r\n      <AddCategory setCategory={setCategory} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n        {/* <li>{categories}</li> */}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n// import App from \"./App\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\nimport { GifExpertApp } from \"./components/GifExpertApp\";\r\n\r\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}